# 5. Clases

Si lo se, hablar de clases en JavaScript puede ser algo peligroso dado que algunos  *puristas*, aquellos que vienen de lenguajes tradicionales y tipados, no toman en serio al lenguaje padre de CoffeeScript. Tal vez sea porque JavaScript sea el lenguaje más famoso que utiliza el paradigma basado en prototipos, y los demás como *Cecil*, *Omega*, *MOO*... no sean tan conocidos. Sin embargo, las clases son tan utiles en JavaScript como lo son en otros lenguajes, con CoffeeScript lo que conseguimos es tener un nivel de abstracción mucho mayor.

Desde este capítulo daremos un pequeño repaso a los prototipos y nos meteremos de lleno en la creación de nuestras primeras clases con CoffeeScript, utilizando herencia, poliformismo...


## 5.1 Prototipos 
Antes de comenzar con las clases es necesario recordar como funciona un lenguaje prototípico como JavaScript, un prototipo es un objeto del cual otros objetos heredan sus propiedades. Por ejemplo vamos a crear nuestro objeto `Hero` el cual tendrá un método prototípico `says`, veamos como:

```
Hero = (@power) ->
Hero::says = -> console.log "My superpower it's #{@power}!"
```
Comenzamos declarando `Hero`, recuerda que existe una convención para que las bases tengan la primera letra en Mayuscula, el cual recibe el argumento `power` en su constructor, con esto conseguimos que este variable esté disponible en la instancia que creemos de `Hero`. Veamos como queda en JavaScript:

```
var Hero;

Hero = function(power) {
  this.power = power;
};

Hero.prototype.says = function() {
  return console.log("My superpower it's " + this.power + "!");
};
```

Simplemente por recordar; un constructor es una función, y en javascript, toda función es un objeto y como cualquier objeto tiene propiedades y métodos. Una función, por defecto, tiene una serie de propiedades, como: `length`, `constructor`, `prototype` y algunos métodos como: `call`, `apply`, entre otros. Cualquier función es susceptible de convertirse en un constructor, basta con anteponer el operador `new` a la llamada de la función.

Ahora vamos a crear un par de superheroes, perdón, un par de instancias `Hero` estableciendo a cada una de ellas su superpoder y llamando al método `says`:

```
superman = new Hero "fly"
superman.says()
> 'My superpower it's fly!'

batman = new Hero "a belt with gadgets"
batman.says()
> 'My superpower it's a belt with gadgets!'
```

Como podías preveer cada instancia de `Hero` *dice* que tiene un poder distinto porque el método `says` hace referencia al attributo `power` de cada instancia. Evidentemente podemos acceder al attributo `power`:

```
superman.power
> 'fly'
```

Cuando usas `new`, ocurren varias cosas:

+ Se crea un nuevo objeto
+ El nuevo objeto recibe el prototipo desde el constructor
+ Se ejecuta el constructor con el contexto del nuevo objeto


Veamos un ejemplo diferente, mezclando prototipos con estáticos:

```
Hero = (@power) ->
  Hero.count++
  @number = Hero.count
  @says()
  
Hero.count = 0
Hero::says = -> console.log "#{@number}. My superpower it's #{@power}!"
```

En este caso ampliamos el constructor de `Hero`, haciendo que tenga un contador de instancias `count` el cual se incrementará cada vez que se crea una nueva instancia (de ahí que la sentencia no fallará, si posteriormente declaramos esa variable). Además creamos un atributo de instancia `@number` que nos devolverá el valor interno de `Hero.count`, la última sentencia del constructor será llamar automáticamente al método prototípico `says` demostrando que todo lo creado funciona. El resultado sería:

```
superman = new Hero "fly"
> '1. My superpower it's fly!'

batman = new Hero "a belt with gadgets"
> '2. My superpower it's a belt with gadgets!'
```

Resumiendo, cada vez que se ejecuta el constructor de `Gift`, los pasos son:

+ Se asigna el superpoder a la instancia con el *shortcut* `@` dede el argument
+ Se incrementa el contador de instancias `count`
+ Copia el valor a la propiedad `@number`
+ Ejecuta la función heredada `@says`

Recuerda que todas las funciones del nuevo objeto se ejecutarán en el contexto del propio objeto, aunque en el capítulo destinado a funciones ya aprendiste como cambiar los contextos de las funciones ¿no?.


## 5.2 Clases
Ahora que ya hemos recordado los prototipos puedo decirte que las clases en CoffeeScript se basan en ellos. Hay varias bibliotecas han intentado acercar el mundo de las clases a JavaScript, pero desde mi humilde punto de vista no les ha ido muy bien ya que la sintaxis ha quedado demasiado complicada. Es entonces cuando llega CoffeeScript al rescate y simplifica a la minima la creación de una clase. Ahora vamos a crear la clase `Hero`:

```
class Hero
```

Como ves la simpleza es máxima y sobre todo entendible y comparable con otros lenguajes de programación. Vamos a ver como quedaría en JavaScript:

```
var Hero;
Hero = (function() {
  function Hero() {}
  return Hero;
})();
```

Como vemos, unicamente hemos declarado una nueva clase `Hero`, y la diferencia entre la carga de sintaxis entre CoffeeScript y JavaScript es abismal; espero que ahora me entiendas. CoffeeScript nos proporciona con eficacia una abstracción de la base prototípica, permitiendonos escribir código mucho más conciso, y sin perder ninguno de los beneficios de los objetos en JavaScript. Ahora creemos un constructor como en el anterior apartado dedicado a los prototipos:

```
class Hero
  constructor: (@power) ->

superman = new Hero "fly"
superman.power
> 'fly'
```

Compilandose a JavaScript, y viendo claramente lo mucho que ganas con CoffeeScript:

```
var Hero;
Hero = (function() {
  function Hero(power) {
    this.power = power;
  }
  return Hero;
})();

var superman = new Hero("fly");
superman.power;
> 'fly'
```

Ahora vas a aprender la diferencia en la declaración entre métodos estáticos y métodos de instancia o prototípicos, para que puedas hacer comparaciones vamos a continuar con nuestro ejemplo de `Hero`:

```
class Hero
  # static private
  _count = 0

  constructor: (@power) ->
    _count++
    @says()

  # Instance methods
  says: ->
    console.log "#{@number()}. My superpower it's #{@power}!"

  number: -> _count
```

Como vemos lo primero que hago es crear una variable privada `_count` que sea accesible para todo el contexto de la clase `Hero`. En el constructor, incremento el contador y llamo a la función de instancia `says`. ¿Por qué CoffeeScript sabe que el método de instancia? muy sencillo porque estamos estableciendo el alias `@` indicando que el contexto de trabajo es el del constructor, ergo el de una instancia.

Para declarar métodos de instancia debes utilizar el operador `:` junto con el nombre del método que deseas crear. En nuestra clase hemos creado 2 métodos: `says` que muestra por pantalla el numero de instancia y el poder de nuestro hero y `number` que muestra el valor de la variable `_count`.

Ahora imagina que necesitas un método estático para la clase `Hero`, por ejemplo vamos a crear un método `count` que nos de el numero de instancias creadas hasta el momento:

```
class Hero
  # ... previous code ... #
  
  # static public method
  @count: ->
    console.log "Number of instances #{_count}"
```

De esta manera ahora segun vas creando instancias, podrás llamar al método `count` de la clase `Hero`, el cual solo es accesible desde la clase y no desde sus instancias:

```
superman = new Hero "fly"
batman = new Hero "a belt with gadgets"

Hero.count()
> 'Number of instances 2'
```


## 5.3 Herencia
La implementación de clases de CoffeeScript no estaría completa sino hubiese ningún mecanismo de obtener herencia entre clases, tranquilo CoffeeScript la tiene. Vas a poder heredar de otra clase simplemente usando el operador `extends`. En el siguiente ejemplo vas a ver como crear una clase base `Vehicle`, de la que extenderemos los vehículos de nuestros heroes. Suena divertido ¿no? comencemos:

```
class window.Vehicle
  fuel: 100

  constructor: (@type, @hero) ->

  use: ->
    @fuel--
    if @fuel > 0
      console.log "#{@hero} is using a #{@type}"
    else
      console.log "Upps!! No fuel in the tank of #{@constructor.name}"
```

Bien, lo primero que he hecho ha sido crear una variable de instancia `fuel`, recuerda `:`, que contendrá el nivel de gasolina del deposito. El constructor de nuestra clase `Vehicle` recibe dos argumentos, `type` para indicar el tipo de vehículo y `hero`para indicar el nombre del heroe dentro del vehículo. Por último he declarado un método de instancia `use` el cual irá restando gasolina y testeará el nivel de la misma para dar un mensaje por consola.

Ahora vamos a crear nuestra primera clase extendida de `Vehicle`, asi que vamos a coger a *Batman* y le vamos a meter dentro de su `BatMobile`:

```
class BatMobile extends Vehicle
  constructor: ->
    super "car", "Batman"
```

Como puedes comprobar lo único que hago a la hora de crear la clase `BatMobile` es usar el operador `extends` haciendo referencia a `Vehicle`. Tras esto en el constructor de la nueva clase llamo al constructor de `Vehicle` con el método `super` y los 2 argumentos que necesita `"car"` haciendo referencia a `@type` y `"Batman"` haciendo referencia a `@hero`. Tan sencillo como eso, ahora podemos hacer que Batman use su vehículo:

```
batmobile = new BatMobile()
batmobile.use()
> 'Batman is using a car'
```

Ahora voy a crear otro vehículo y voy a sobreescribir la variable `fuel` en la nueva clase y así podre ver el diferente comportamiento del método `use`:

```
class BatPod extends Vehicle
  fuel: 0
  
  constructor: ->
    super "moto", "Robin"
```

Pobre `"Robin"` cuando vaya a utilizar la nueva clase `BatPod` no va a poder usarla:

```
batpod = new BatPod()
batpod.use()
> 'Upps!! No fuel in the tank of BatMoto'
```

Como ves en el método `use` de la clase `Vehicle` utilizo el attributo `@constructor.name` que hace referencia al nombre de la clase, en este caso `BatPod`. Como queremos que *Robin* pueda disfrutar de su vehículo vamos a crear un método de instancia y exclusivo de `BatPod` para que recarge la gasolina:

```
class BatPod extends Vehicle
  # ... previous code ... #

  refuel: ->
    @fuel = 10
```

Finalizando este apartado tengo que decir que las propiedades estáticas se **copian** en las subclases, en lugar de estar heredadas por referencia. Esto es debido a la arquitectura e implementación de los prototipos de JavaScript, y desgraciadamente es un problema difícil de solucionar.


## 5.4 Polimorfismo
Uno de los usos interesantes de las clases es el llamado *polimorfismo*, un concepto de la programación orientada a objetos el cual podría decirse que en esencia refiere al comportamiento de los objetos, no a su pertenencia a una jerarquía de clases (o a sus tipos de datos). Te voy a refrescar este concepto con un ejemplo muy sencillo: 

```
class Vehicle
  constructor: (@fuel = 10) ->
  burnout: ->
    throw new Error "I'm a abstract method"
```

En este caso nuestra clase `Vehicle` tiene un método abstracto `burnout` el cual si intentamos llamarlo desde una nueva instancia de esta clase nos dará una excepción. Este metodo se utilizará en las subclases de `Vehicle` y nos devolverá el numero de kilometros que puede recorrer el vehículo al ejecutar el método:

```
class BatMobile extends Vehicle
  constructor: ->
    super fuel = 50
  burnout: -> 
  	console.log @fuel / 25

class BatPod extends Vehicle
  burnout: ->
    console.log @fuel / 8
```

La diferencia entre el `BatMobile` y el `BatPod` es únicamente que el primero establece el argumento `fuel` con una cantidad de `50`. Como puedes ver cada método `burnout` realiza diferentes operaciones puesto que el consumo de los vehículos es distinto. 

```
km_in_burnout = (vehicle) ->
  unless vehicle instanceof Vehicle
   throw new Error "vehicle requires a Vehicle instance!"
  console.log vehicle.burnout()

km_in_burnout new BatMobile()
> 2

km_in_burnout new BatPod()
> 1,25
```

La funcion `km_in_burnout` lo primero que hace al recibir un argumento es comprobar que sea una instancia de la clase `Vehicle`, para ello se utiliza la expresión `instanceof`. En el caso de que sea una instancia válida devolverá por consola el resultado de la función `burnout`. 
