# 1. Comenzando
Si has leído el prefacio, se puede decir que ya conoces el origen de CoffeeScript, que es lo que trae y porque es una de las mejores cosas que le han pasado a los programadores web en estos últimos años. Ahora mismo no eres capaz de escribir una sola linea, así que te voy a ayudar a preparar tu entorno de trabajo con CoffeeScript.


## 1.1 Entorno necesario
En el prefacio has aprendido que el compilador de CoffeeScript esta escrito en CoffeeScript. Curiosidades aparte, tienes que ser capaz de resolver la siguiente cuestión:

	¿Cómo puedo ejecutar el compilador en mi sistema si todavía no tengo el compilador de CoffeeScript?

¿No? Te voy a ayudar preguntándote (de nuevo), si hubiera una manera de ejecutar JavaScript en tu maquina sin utilizar un navegador web y mostrar ese código al sistema de ficheros... ¿Sigues sin caer? ¿De verdad? 

Es muy sencillo, no hace falta más que utilizar [NodeJS](http://nodejs.org) y he aquí donde viene un punto de aclaración; mucha gente entiende *"Node"* como un servidor web en JavaScript pero, por suerte, es mucho más que eso y cada vez está más presente en soluciones que nada tienen que ver con el mundo de los servidores web. Fundamentalmente NodeJS es un puerta entre tu código JavaScript y el sistema operativo, trayendo consigo una potente herramienta llamada [NPM](http://npmjs.org), Node Package Manager, que lo hace extensible infinitamente. Si vienes del mundo de Ruby piensa en NPM como una analogía a las *Gems*.

El resto de este área se centrará en como instalar NodeJS, que por supuesto necesitaremos para usar CoffeeScript y su compilador. Pero si no puedes esperar más y quieres intentar codificar tus primeras lineas en CoffeScript echa un pequeño vistazo al [Try CoffeeScript](http://coffeescript.org) de la página oficial.


## 1.2 Instalando NodeJS 
Existen dos formas de instalar nodeJS, mediante el código fuente del proyecto (y su posterior compilación) o bien descargando una instalación con el proyecto ya compilado. Independientemente del sistema operativo que uses no tendrás grandes problemas, pero si que puedo decir que por mi experiencia los que más problemas suelen tener con la instalación han sido los usuarios de Linux. Veamos como instalarlo en cada uno de los sistemas operativos:

### Mac
Si eres usuario como yo del maravilloso [Brew](http://brew.sh/) (homebrew package manager), unicamente tendrás que ejecutar el comando:

```
brew install node
```

En caso contrario sigue los siguientes pasos:

* Instala Xcode
* Instala GIT
* Ejecuta los siguientes comandos:

```
darwin_setup.sh
git clone git://github.com/ry/node.git
cd node
./configure
make
sudo make install
```

### Linux (Debian y derivados como Ubuntu)
Tenemos dos opciones, o bien compilar el código fuente, o bien utilizar algún repositorio actualizado, de forma que tengamos siempre la última versión cuando actualicemos paquetes.

#### Mediante repositorio
```
sudo add-apt-repository ppa:chris-lea/node.js
sudo apt-get update
sudo apt-get install nodejs
```
Si quisiesemos probar la versión de desarrollo, sólo tendríamos que cambiar `nodejs` por `nodejs-dev`

#### Mediante código fuente
Antes de compilar NodeJS necesitamos añadir las siguientes dependencias a tu sistema:

```
sudo apt-get install g++ curl libssl-dev apache2-utils
sudo apt-get install git-core
```

Ahora ejecuta los mismos comandos que en la instalación en Mac:

```
ubuntu_setup.sh
git clone git://github.com/ry/node.git
cd node
./configure
make
sudo make install
```

### Windows
Justo para este sistema voy a recomendar encarecidamente el uso de los downloads oficiales desde la [sección de descargas](http://nodejs.org/download/) de NodeJS. El cual lo único que te pedirá es reiniciar el sistema para que NodeJS esté disponible.


### Tu primer servidor NodeJS
Vamos a crear un pequeño programa para comprobar que todo está funcionando correctamente, antes de ello ejecuta el siguiente comando para comprobar la versión de la que dispones:

```
node -v
```

Ahora viendo que tienes una versión reciente (por tu bien) vas a crear un pequeño servidor con un único fichero, a este le llamaras hello_node.js:

**hello_node.js**

```
var http = require('http');

http.createServer(function (request, response) {
  response.writeHead(200, {'Content-Type': 'text/plain'});
  response.end('Hello Node.js\n');
}).listen(1337, "127.0.0.1");

console.log('Server running at http://127.0.0.1:1337/');
```

Ahora toca ver si el servidor arranca correctamente ejecutando el **NCL** (Node Command Line):

```
node hello_node.js
```

Si todo va bien deberías ver por tu pantalla el mensaje `Server running at http://127.0.0.1:1337/`, si es asi vete a tu *browser* a esa misma dirección y aparecerá por pantalla un bonito mensaje. Desde este momento puedo decirte que tienes NodeJS listo y funcionando para empezar con CoffeeScript.


## 1.3 Instalando CoffeeScript
Ahora que ya tenemos NodeJS la instalación de nuestro nuevo lenguaje favorito va a ser   sencilla ya que utilizaremos NPM con el comando:

```
sudo npm install -g coffee-script
```

Como ves he puesto `sudo` (solo para mac/linux) y los parámetros `install` (evidente) y `-g` para que lo instale globalmente seguido de `coffee-script` que en este caso es el paquete que queremos instalar. Tras la instalación debes comprobar que versión de CoffeeScript tienes en el sistema:

```
coffee -v
```

Si aparece una nueva versión de CoffeeScript la actualización es relativamente sencilla ya que únicamente tienes que volver a utilizar NPM cambiando un único parámetro ¿ya sabes cual es?:

```
sudo npm update -g coffee-script
```

Ahora que ya tienes CoffeeScript vamos a ver si funciona todo correctamente creando una simple función desde el terminal con la consola `coffee`:

```
coffee
coffee> sum = (a, b) -> a + b
coffee> sum 1, 2
3
coffee> sum 3, 4
7
```

Se que no sabes lo que has escrito, no es la idea de este capítulo, aunque por la sintaxis y los operadores puedes llegar a sacar una conclusión. En el siguiente capitulo vas a conocer más de la sintaxis de este lenguaje y descubrirás lo bien hecho que está y lo divertido que es programar con el.

Se que no sabes lo que has escrito, no es la idea de este capítulo, aunque por la sintaxis y los operadores puedes llegar a saber lo que hace. En el siguiente capitulo vamos a entender muy bien como se crean funciones así como interiorizar muy bien el ámbito y contexto de las mismas.